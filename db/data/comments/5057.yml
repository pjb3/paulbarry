---
id: 5057
article_id: 4802
created_at: 2007-04-17 16:29:51.000000000 Z
url: 
email: lucboudreau@gmail.com
author: Luc
ip: 132.204.203.103
body: "Having worked with both frameworks on a professionnal basis, I have this to
  say. \n\nHibernate is great. Really really great. Really. Rails is freakin' sweet.
  Freakin' doodly sweet. Really. That said, I don't understand where the comparaison
  comes from.\n\nHibernate is a data mapper. It's not an active record pattern implementation,
  never was meant to be and most certainly will never be. It fills gaps left by the
  active record design pattern, and yes, it falls in many many more.\n\n\nDATA MAPPER
  != ACTIVE RECORD\n\nAnyone who doesn't understand this didn't make is architecture
  classes. You should know better. An active record pattern maps one business domain
  entity to one table, while a data mapper is used to fill gaps between multiple tables
  entities and the object world.\n\nAs I've said, I worked with both. And yes, I LEARNED
  FROM RAILS. A lot as a matter of fact. Let's re-use the example where you have a
  FooDAO.find(Long id) method. The most stupid thing to do (yes, there's no worst
  way I can think of right now) is the :\n\nFooDAO.find(Long id)\nFooDAO.findWithBar(Long
  id)\nFooDAO.findWithBarAndWhatever(Long id)\n\nWho the heck would do that in the
  first place anyways?? Not doing this is certainly not what I learned from Rails.
  They should teach you that this is a 'no no' in junior school.\n\nRails has thought
  me rigor and creativity.\n\n\nRIGOR\n\nWith Rails, you can't violate the framework
  layers. In fact, you will never have to do it. Lesson 1 is therefore : With a good
  architecture, you don't even need workarounds. If you have to build a hack for the
  framework because it gets in your way, choose another one. \n\nJava offers a shitload
  of frameworks, and Hibernate can't handle all the situations, despite the so numerous
  claims. If needed, don't try to hack Hibernate, use something else which will work
  side by side with it. And don't flame me with this, it will not double the work
  load. It does double the work load if you thought that Hibernate would do everything
  in the first place, but again, you should know better.\n\nHibernate can't guess
  what you need to be initialized on each situations. It's better like this anyways.
  Theorically, it's the service layer responsability. Services define what are the
  actions on a given system. Let them decide. Don't even try to put business logic
  in DAOs. It's a dead end.\n\n\nCREATIVITY\n\nUse the language at your advantage.
  Hibernate's eager fetching can become a serious pain in the sack. You'll often end-up
  with 1200 selects executed for a single entity load. And lazy loading is not a perfect
  solution in itself. Beleive me, when you have polymorphic many-to-many associations,
  or any exotic business domain mapped in Hibernate, you could end up having a real
  problem.\n\nAs mentionned up here, the correct solution to lazy fetching is to create
  methods which implement a lazy loading management framework. It creates a layer
  between your application and Hibernate because, again, Hibernate can't handle every
  situations.\n\nJava has interfaces, right? So let's create object interfaces which
  abstracts the two frameworks : Hibernate and custom made lazy loader manager.\n\nFooDAO.find(Long
  id)\nFooDAO.find(Long id, String[] lazyPathsToInit)*\n\n* the second method calls
  the first one, then relays the initialization to a path finder which initializes
  the correct properties before returning the object tree.\n\nThere you go ! Rails-like
  behavior for a creative solution. You've just mimicked the :include mechanism of
  Rails, but it's suitable for a data mapper; Hibernate. You now have combined two
  frameworks and your service layer didn't see the difference.\n\nThere are a lot
  of lessons to be learned from Rails. And I didn't even mention the most important
  lesson of all : Convention over Adaptation. This one could be argued over and over,
  indeed. But I beleive that conventions and standards were at the root of computing
  in the first place, so why not adopt it?\n\nCheers !"
guid: 65b2920b-52d9-441d-8d7c-2c8a1c068adb
