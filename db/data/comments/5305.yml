---
id: 5305
article_id: 4943
created_at: 2009-07-17 13:16:54.000000000 Z
url: 
email: 
author: Masklinn
ip: 93.4.223.103
body: |-
  @Mike Tomasello,

  > Certainly, in other languages, dealing with 'Nothing' cases is often best achieved with exceptions rather than returning null, nil, None, et al.

  Dealing with some Nothing cases, but not all since otherwise one wouldn't need null references (and they're clearly pretty often used).

  Anyway @op as others have said, the Maybe type and the Maybe monad are the same thing (more precisely, Maybe is an instance of the Monad typeclass: http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Maybe.html#t%3AMaybe). The monadic part (which allows you to perform operations on boxed values -- whether or not there's actually one -- by lifting functions into Maybe) is pretty specific to Haskell, but the idea of disallowing null references and using a type for that isn't, several languages have it though it's usually called Option/None/Some rather than Maybe/Nothing/Just (ML dialects e.g. SML, OCaml, F# as well as Scala).
guid: 98fb2feb-989e-433e-a23e-e5142d4e7d61
