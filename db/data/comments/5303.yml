---
id: 5303
article_id: 4943
created_at: 2009-07-17 12:11:09.000000000 Z
url: 
email: 
author: rtperson
ip: 199.44.92.98
body: "I'm not entirely sure how to put this, but there's a flaw running through your
  entire analysis. Namely, the \"Maybe type\" *is* the Maybe Monad. There is not difference
  between them, in spite of what you suggest in your last paragraph. \n\nThe whole
  idea of Monads is that you can wrap your functional code inside a type. That way,
  whenever you expect a side effect from your code, you can infer how to handle the
  side effect by the very nature of the type itself. Checked exceptions don't even
  come close to letting you do this. \n\nA better analogy would be to imagine a utility
  class in which everything is static (to somewhat account for Haskell's immutability).
  Then you create your side-effect-producing class. Call it NullCheck or something
  like that, and make NullCheck the wrapper for your static class. In fact, let your
  static functionality be represented by a generic type in NullCheck, to allow NullCheck
  to hold any class whatsoever. \n\nMy head hurts just thinking about what this code
  would look like in Java, not to mention what it would take to get it to do anything
  useful.\n\nI'm no expert on Monads. There are a lot of clever tricks with combining
  them that I haven't learned how to do yet. But even something as easy as the Maybe
  monad would be very tough to implement with Java as it is now. A bit easier to do
  in C/C++, mainly because of function pointers, but almost impossible to enforce."
guid: f65433ad-a0e2-4b2f-88af-8eb7d14165cc
