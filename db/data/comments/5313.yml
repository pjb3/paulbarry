---
id: 5313
article_id: 4944
created_at: 2009-07-21 21:43:51.000000000 Z
url: http://community.haskell.org/~wren/
email: 
author: wren ng thornton
ip: 71.206.28.245
body: |-
  One of the big problems with combining free-reign reflection and type systems, is that reflection breaks parametricity. Reconciling this is actually a big area of research in type theory today, particularly for GADTs and Dependent Types. Type indices are nice for things like compile-time bounds checking and dynamic type-inference, and parametricity is nice for things like writing generic code and doing program transformations (optimizations), but they interfere with and undermine one another.

  As for the question about whether typed languages can ever be as powerful as untyped languages, the short answer is "no": the untyped lambda calculus is Turing complete, whereas typed lambda calculi are strongly normalizing (in the term layer) and thus are not. However, powerful typed lambda calculi regain some of that expressivity by moving non-termination into the type layer. And it's a somewhat dubious claim that programming languages should be Turing complete in the first place (since even the hardware they run on isn't).

  I think the real question that needs to be asked here is what is actually meant by "metaprogramming", "reflection", and "introspection". That is, what is the problem that we really want to solve (not how do we want to go about solving it). In untyped and weakly-typed languages reflection is used to make up for a lack of parametricity and genericity. In OOP languages inheritance is often used to make up for a lack of parametricity. In languages like Haskell we can use parametric polymorphism. In languages like MetaOCaml we can use staged compilation. The level of dynamism and the range of bugs and optimizations varies dramatically between these different approaches, but they're all trying to solve the same basic problem. In my experience, when folks from the Ruby or Python communities are talking about "metaprogramming" they're using the term to mean "anything outside of 'normal' programming" rather than to mean something specific like staged programming, type-level programming, or the like.
guid: 965f897c-1bb6-436a-8b84-98a3cceb7138
