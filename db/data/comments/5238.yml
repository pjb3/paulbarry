---
id: 5238
article_id: 4922
created_at: 2008-12-20 05:40:38.000000000 Z
url: 
email: 
author: 88.6.2.29
ip: 88.6.2.29
body: "\"I've also heard the argument made that statically-typed languages allow you\nto
  write less tests, but I have also not found this to be the case.\"\n\nIs this based
  on your previous work with Java or do you have some experience\nwith expressive
  type systems like Haskell's, OCaml's or SML's? You cannot\ntranspose conclusions
  drawn from the use of Java to these languages, as its\ntype system is very limited.\n\nYou
  also say that \"most syntax and type errors will be found with the same\ntests you
  use to test the logic of the program\", which again seems to stem\nfrom the very
  limited capabilities of Java's type system, as it conveys the\nidea that type errors
  are necessarily trivial, to the point that they can\nalmost be likened to \"syntax
  errors\".  \n\nA good type system allows you to encode useful system-wide invariants
  which\nwill be enforced systematically by the compiler and are sometimes hard to\ntest,
  e.g., \"the user is not authenticated and thus has read-only access\nthroughout
  the subsystems\" or \"the generated markup is guaranteed to be valid\"\n(if not,
  the code will not type/compile) vs. \"it happens to be valid in this\nor that case\"
  (unit testing).\n"
guid: c57f3cfa-340d-4cd9-890a-0eb668ab1712
