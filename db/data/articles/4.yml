---
id: 4
slug: evaluating-evaluating-ruby
created_at: 2006-05-10 11:14:00.000000000 Z
published_at: 2006-05-10 11:14:00.000000000 Z
title: Evaluating Evaluating Ruby
body: "The lastest post on Martin Fowler's Bliki is titled <a href=\"http://martinfowler.com/bliki/EvaluatingRuby.html\">EvaluatingRuby</a>
  (that's right, with no spaces.  He names his articles as we would name a Class).
  \ It's pretty short and to the point.  He's trying to give his opinion on the Java/J2EE
  vs. Ruby/Rails debate, and his opinion is \"I don't know\".  \r\n\r\nOn one hand,
  as any experienced Java/J2EE developer who has spent any amount of time looking
  at Ruby on Rails with an open mind will tell you, he points out that there are feature
  of the Ruby language and the Rails framework that allow you to develop web applications
  quickly without writting a lot of code.  He mentions that he has talked to people
  using Ruby/Rails for real world applications and they have all said the framework
  allows them to be more productive, even in some apps that aren't your typical \"web-frontend-for-a-database\"
  apps.  \r\n\r\nHe also touchs on a few of the counter arguments to Ruby/Rails, which
  are \"the dynamic nature of Ruby and the lack of tools\".  First off, the \"lack
  of tools\" is crap.  Over time, we'll either get tools or realize we don't need
  tools.  If we do need tools, it seems to me the <a href=\"http://www.radrails.org/\">RadRails</a>
  is on its way to providing a lot of what is needed.  A visual GUI, ERD-like designer
  for migrations would be nice too, but we'll see.  \r\n\r\nBut the other counter
  argument may have some validity.  I assume be the \"dynamic nature of Ruby\" he
  is referring to the fact that a lot of things can be going on with Ruby code and
  it can be difficult to understand it.  I could see how this could be a problem,
  especially if your working with a team that has varying levels of knowledge of the
  Ruby language and the Rails framework.  I think <a href=\"http://www.theserverside.com/articles/article.tss?l=RailsHibernate\">Patrick
  Peak described this well</a> when he pointed about that it can actually be easier
  to work with a domain model that is explict, in that you can tell what fields it
  has, without having to look at the corresponding database table.  I agree with that,
  I'd rather declare my object properties and datatype in the code and have the framework
  generate the DDL for me, rather than have my domain model determine the properties
  at runtime by looking at the database metadata.\r\n\r\nBut ultimately I think the
  best point in the article is \"There's also plenty of projects where development
  productivity is swamped by political and other communication factors. Here Ruby's
  advantage would be significantly attenuated.\"  I think this is a great point.  I
  think that if you know how to use many of the Java frameworks that are available
  (JUnit, WebWork, Spring, Hibernate, Freemarker, etc.) and you know how to build
  a solid domain model and database structure, that there isn't going to be a giant
  productivity gain with Ruby/Rails.  I believe in some cases the biggest advantage
  to Ruby/Rails is that it lays everything out for you and forces you to use MVC,
  ORM and Unit Testing, but if you're already doing that with Java/J2EE, there's not
  much gain there.  \r\n\r\nBottom line, you can be productive with either Java/J2EE
  or RubyOnRails and if you are looking to gain productivity, before considering switching
  languages or frameworks, look at the other aspects of your project development lifecycle.
  \ You probably spending more time in the design and testing phases than you do in
  the development phase, so there can be more to gain by improving your processes
  in those other areas."
format: Markdown
guid: 42dec357-36c5-4efb-9d87-265c86114f37
comments_count: 0
