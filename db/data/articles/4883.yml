---
id: 4883
slug: the-rules-of-ruby-self
created_at: 2008-04-16 23:34:24.000000000 Z
published_at: 2008-04-17 21:53:22.000000000 Z
title: The Rules of Ruby Self
body: "At the [NovaRUG meeting yesterday][novarug], Dave Thomas gave a great talk
  on how the object model works in Ruby.  One of his main points was that in Ruby
  you are always sending a message to an object.  If you don't explicitly say which
  object you want to send the message to, Ruby sends it to self.  In order to make
  Ruby as clear a language as it is, self changes during the execution of your code.
  \ To mentally keep track of what self is, you only need to understand rules of how
  self changes.  There are only 2 things that change what self points to:\r\n\r\n1.
  \ Explicit receiver of method call\r\n\r\n        puts self #self is \"main\", the
  top-level object instance\r\n        Object.new  #self is temporarily changed to
  the class Object, but then back to main\r\n    \r\n\r\n2.  class/module definition\r\n\r\n
  \       puts self #Again, self is \"main\"\r\n        class Foo\r\n          puts
  self #self is now Foo\r\n        end\r\n        #self is back to being main\r\n\r\nIf
  you think of it this way, it should be easy to always figure out what self is pointing
  to.  Being able to hold the mental picture of the changes to self as you read through
  code can make it easily to follow what is going on.\r\n\r\n[novarug]: http://novarug.org/articles/2008/04/10/april-meeting"
format: Markdown
guid: a30b2431-9397-414b-828b-39d683c76424
comments_count: 3
